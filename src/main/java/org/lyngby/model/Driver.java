package org.lyngby.model;

import jakarta.persistence.*;
import lombok.*;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Date;

@Getter
@Setter
@ToString
@NoArgsConstructor
@Entity
@Table(name = "driver")
@NamedQueries({
        @NamedQuery(name = "Driver.findAll", query = "SELECT d FROM Driver d"),
        @NamedQuery(name = "Driver.deleteAllDrivers", query = "DELETE FROM Driver d")
})
public class Driver {

    @Setter(AccessLevel.NONE)
    @Id
    @Column(name = "id", nullable = false, unique = true)
    private String driverId; // example: "3D1-A25-12M"

    @Column(name = "name", nullable = false)
    private String name;

    @Column(name = "surname", nullable = false)
    private String surname;

    @Column(name = "salary")
    private BigDecimal salary;

    @Setter(AccessLevel.NONE)
    @Temporal(value = TemporalType.DATE)
    @Column(name = "employment_date", nullable = false)
    private LocalDate employmentDate; // example: "2019-01-01"

    @PrePersist
    private void prePersist() {
        setDriverId(autoGenerateDriverId());
        setEmploymentDate(LocalDate.now());
    }

    /*
        // Id pattern 230826-BD-398E
        // 23 - year of employment (20(23))
        // 08 - month of year
        // 26 - day of month
        // B - first letter of name
        // D - first letter of surname
        // 398 - random number (100-999)
        // E - last letter of surname
     */
    private String autoGenerateDriverId() {
        String driverId = "";
        LocalDateTime now = LocalDateTime.now();
        driverId += now.getYear() % 100;
        driverId += now.getMonthValue() < 10 ? "0" + now.getMonthValue() : now.getMonthValue();
        driverId += now.getDayOfMonth() < 10 ? "0" + now.getDayOfMonth() : now.getDayOfMonth();
        driverId += "-";
        driverId += name.toUpperCase().charAt(0);
        driverId += surname.toUpperCase().charAt(0);
        driverId += "-";
        driverId += (int) (Math.random() * 900) + 100;
        driverId += surname.toUpperCase().charAt(surname.length() - 1);
        return driverId;
    }

    public Driver(String name, String surname, BigDecimal salary) {
        this.name = name;
        this.surname = surname;
        this.salary = salary;
    }

    public void setEmploymentDate(LocalDate employmentDate) {
        this.employmentDate = employmentDate;
    }

    public Boolean validateDriverId(String driverId) {
        return driverId.matches("[0-9][0-9][0-9][0-9][0-9][0-9]-[A-Z][A-Z]-[0-9][0-9][0-9][A-Z]");
    }

    public void setDriverId(String driverId) {
        if (!validateDriverId(driverId)) throw new IllegalArgumentException("Driver ID is not valid");
        this.driverId = driverId;
    }

}
